.TH "/mnt/c/Users/actim/code/c/square/quadratic_equation.h" 3 "Wed Aug 24 2022" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/mnt/c/Users/actim/code/c/square/quadratic_equation.h \- quadratic equation header file  

.SH SYNOPSIS
.br
.PP
\fC#include <math\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <assert\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBRED\fP   '\\x1B[31m'"
.br
.RI "эта строка позволяет перекрасить цвет последующих символов в консоли в красный "
.ti -1c
.RI "#define \fBGREEN\fP   '\\x1B[32m'"
.br
.RI "эта строка позволяет перекрасить цвет последующих символов в консоли в зелный "
.ti -1c
.RI "#define \fBEND_COLOR\fP   '\\033[0m'"
.br
.RI "эта строка позволяет вернуть цвет последующих символов в консоли к стандартному "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBunit_test\fP ()"
.br
.RI "Function called for code testing\&. "
.ti -1c
.RI "bool \fBtestqe\fP (double a, double b, double c, int *count_root, double *ans)"
.br
.RI "A function that tests the operation of a test with certain parameters\&. "
.ti -1c
.RI "void \fBoutput_roots\fP (int count_root, double *ans)"
.br
.RI "A function that outputs the found roots of the quadratic equation\&. "
.ti -1c
.RI "bool \fBinput_3_argument\fP (double *a, double *b, double *c)"
.br
.RI "Function used to take equation parameters from the console\&. "
.ti -1c
.RI "bool \fBequal_double\fP (double a, double b)"
.br
.RI "Function for comparing 2 numbers of type double\&. "
.ti -1c
.RI "void \fBliner_equation\fP (double a, double b, int *count_root, double *ans)"
.br
.RI "The function of solving a linear equation\&. "
.ti -1c
.RI "void \fBquadratic_equation\fP (double a, double b, double c, int *count_root, double *ans)"
.br
.RI "The function of solving the correct quadratic equation\&. "
.ti -1c
.RI "void \fBsolveqe\fP (double a, double b, double c, int *count_root, double *ans)"
.br
.RI "The function of solving the quadratic equation\&. "
.ti -1c
.RI "void \fBswap_double\fP (double *a, double *b)"
.br
.RI "A function that swaps two numbers of the double type\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const double \fBEpsilon\fP = 1e\-5"
.br
.RI "константа минимальной разницы, при которой double считаются разными "
.ti -1c
.RI "const int \fBInfinite_roots\fP = \-1"
.br
.RI "константа обозначающая что уравнение имеет бесконечное колличество решений "
.in -1c
.SH "Detailed Description"
.PP 
quadratic equation header file 


.SH "Macro Definition Documentation"
.PP 
.SS "#define END_COLOR   '\\033[0m'"

.PP
эта строка позволяет вернуть цвет последующих символов в консоли к стандартному 
.SS "#define GREEN   '\\x1B[32m'"

.PP
эта строка позволяет перекрасить цвет последующих символов в консоли в зелный 
.SS "#define RED   '\\x1B[31m'"

.PP
эта строка позволяет перекрасить цвет последующих символов в консоли в красный 
.SH "Function Documentation"
.PP 
.SS "bool equal_double (double a, double b)"

.PP
Function for comparing 2 numbers of type double\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP the first double number 
.br
\fIb\fP the second double number
.RE
.PP
A constant is used for comparison, if the difference between the stored double values differs by less than this constant, these numbers are considered equal\&.
.br

.br
 Для сравнения используется константа, если разница между сохраннёными значениями double отличается меньше чем на эту константу, эти числа считаются равными\&.
.br
Если числа равны вернётся true иначе false\&.
.PP
\fBReturns\fP
.RS 4
true if the numbers are equal, otherwise false 
.RE
.PP

.SS "bool input_3_argument (double * a, double * b, double * c)"

.PP
Function used to take equation parameters from the console\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP pointer to the parameter of the quadratic equation 
.br
\fIb\fP pointer to the parameter of the quadratic equation 
.br
\fIc\fP pointer to the parameter of the quadratic equation
.br
\fIa\fP parameter of the quadratic equation 
.br
\fIb\fP parameter of the quadratic equation 
.br
\fIc\fP parameter of the quadratic equation
.RE
.PP
The input will continue until the letter f is entered or 3 parameters are specified that can be written to double\&.
.br

.br
 В случае если введена буква f будет считаться что человек хочет завершить работу и функция вернёт true как знак того\&.
.br
Ввод будет продолжаться до тех пор пока не будет введена буква f или не будет указано 3 параметра которые можно записать в double\&.
.PP
\fBReturns\fP
.RS 4
true if the letter f is entered, otherwise false 
.RE
.PP

.SS "void liner_equation (double a, double b, int * count_root, double * ans)"

.PP
The function of solving a linear equation\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP parameter of the linear equation 
.br
\fIb\fP parameter of the linear equation 
.br
\fIcount_root\fP pointer to the variable number of roots of the equation 
.br
\fIans\fP pointer to an array of roots
.br
\fIcount_root\fP the number of roots of the equation 
.br
\fIans\fP array of roots
.RE
.PP
This function considers the linear case of a quadratic equation when the parameter a is 0, which is equivalent to a linear equation\&.
.br

.br
 Эта функция рассматривает часный случай квадратного уравнения, когда параметр a равен 0, что эквивалентно линейному уравнению\&. 
.SS "void output_roots (int count_root, double * ans)"

.PP
A function that outputs the found roots of the quadratic equation\&. 
.PP
\fBParameters\fP
.RS 4
\fIcount_root\fP number of roots of the equation 
.br
\fIans\fP pointer to the array of roots of the equation
.RE
.PP
In this function, all cases are considered separately: there are no roots, 1 root, 2 roots, infinity of roots\&.
.br

.br
 В этой функции отдельно рассматриваются все случаи: корней нет, 1 корень, 2 корня, бесконечность корней\&. 
.SS "void quadratic_equation (double a, double b, double c, int * count_root, double * ans)"

.PP
The function of solving the correct quadratic equation\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP parameter of the quadratic equation 
.br
\fIb\fP parameter of the quadratic equation 
.br
\fIc\fP parameter of the quadratic equation 
.br
\fIcount_root\fP pointer to the variable number of roots 
.br
\fIans\fP pointer to an array of roots
.br
\fIcount_root\fP the variable number of roots 
.br
\fIans\fP array of roots
.RE
.PP
This function considers the linear case of a quadratic equation when the parameter a is not equal to 0, which guarantees a non-infinite number of roots\&.
.br

.br
 Эта функция рассматривает часный случай квадратного уравнения, когда параметр a не равен 0, что гарантирует не бесконечное число корней\&. 
.SS "void solveqe (double a, double b, double c, int * count_root, double * ans)"

.PP
The function of solving the quadratic equation\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP parameter of the quadratic equation 
.br
\fIb\fP parameter of the quadratic equation 
.br
\fIc\fP parameter of the quadratic equation 
.br
\fIcount_root\fP pointer to the variable number of roots 
.br
\fIans\fP pointer to an array of roots
.br
\fIcount_root\fP the variable number of roots 
.br
\fIans\fP array of roots
.RE
.PP
This function divides the quadratic equation into 2 cases\&.
.br
If a is 0, then the equation is treated as linear\&.
.br
If a is not equal to 0, then the equation is considered as a square equation that cannot have an infinite number of roots\&.
.br

.br
 Эта функция разделяет квадратное уравнение на 2 случая\&.
.br
Если a равен 0, то уравнение рассматривается как линейное\&.
.br
Если а не равен 0, то уравнение рассматривается как квадратное у которого не может возникнуть бесконечное колличество корней\&. 
.SS "void swap_double (double * a, double * b)"

.PP
A function that swaps two numbers of the double type\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP pointer to a double number 
.br
\fIb\fP pointer to a double number
.br
\fIa\fP a double number 
.br
\fIb\fP a double number
.RE
.PP
This function swaps 2 double numbers\&.
.br

.br
 Эта функция меняет местами 2 числа типа double\&. 
.SS "bool testqe (double a, double b, double c, int * count_root, double * ans)"

.PP
A function that tests the operation of a test with certain parameters\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP parameter of the quadratic equation 
.br
\fIb\fP parameter of the quadratic equation 
.br
\fIc\fP parameter of the quadratic equation 
.br
\fIcount_root\fP pointer to the number of roots of the quadratic equation 
.br
\fIans\fP pointer to the array of roots of the equation
.RE
.PP
This function does not contain sets of tests, but only calls the main testing function on predefined input and output data\&.
.br

.br
 Эта функция не содержит набот тестов, а только вызывает функцию основного тестирования на заранее определённых входных и выходных данных\&.
.br
В случае если верный ответ совподает с выводом программы возврощается true иначе false\&.
.PP
\fBReturns\fP
.RS 4
If the correct answer coincides with the output of the program, true is returned otherwise false\&. 
.RE
.PP

.SS "void unit_test ()"

.PP
Function called for code testing\&. This function is called when the compilation flag is specified -D TEST \&.
.br
It contains a set of tests and checks the operation of the main program on them using the \fBtestqe()\fP function\&.
.br
Also, this function outputs information about the passed tests and the result of the check to the console\&.
.br

.br
 Данная функция вызывается при указании флага компиляции -D TEST \&.
.br
Она содержит набор тестов и проверяет на них работу основной программы с помощью функции \fBtestqe()\fP\&.
.br
Так же эта функция выводит в консоль информацию о пройденных тестах и результат проверки\&. 
.SH "Variable Documentation"
.PP 
.SS "const double Epsilon = 1e\-5"

.PP
константа минимальной разницы, при которой double считаются разными 
.SS "const int Infinite_roots = \-1"

.PP
константа обозначающая что уравнение имеет бесконечное колличество решений 
.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
